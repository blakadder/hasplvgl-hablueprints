
blueprint:
  name: 'hasp-lvgl: Control Switch Object'
  description: Link a hasp-lvgl switch object with an entity
  domain: automation
  
  input:
    target_entity:
      name: Entity controlled by the object
      description: Select an entity to bind with the switch object on p<x>b<x>
      selector:
        entity:
    plate:
      name: hasp-lvgl Plate 
      description: Select hasp-lvgl plate whith the object
      selector:
        entity:
          integration: mqtt
          domain: binary_sensor
          device_class: moving
    page:
      name: Page ID (p<x>)
      selector: 
        number:
          min: 0
          max: 12
          mode: box
    object:
      name: Object ID (b<x>)
      selector: 
        number:
          min: 1
          max: 200
          mode: box
mode: single
max_exceeded: silent

variables:
  page: !input page
  object: !input object
  target_entity: !input target_entity
  haspentity: !input plate
  node: '{{ haspentity.split(".")[1].replace("_hasp_active_page", "") }}'
  state_topic: '{{ "hasp/" ~ node ~ "/state/p" ~ page ~ "b" ~ object ~ "" }}'
  command_topic: '{{ "hasp/" ~ node ~ "/command/p[" ~ page ~ "].b[" ~ object ~ "]"}}'

trigger:
  - platform: mqtt
    topic: 'hasp/+/state/+'
  - platform: state
    entity_id: !input target_entity
  - platform: state
    entity_id: !input plate
    attribute: status
    from:
    to: 'available'

action:
  - choose:
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "mqtt" and trigger.topic == state_topic }}'
        sequence:
          - service: >-
              {% if trigger.payload_json.val == 1 %}homeassistant.turn_on{% else %}homeassistant.turn_off{% endif %}
            entity_id: !input target_entity
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "state" and trigger.entity_id == target_entity }}'
        sequence:
          - service: mqtt.publish
            data:
              topic: '{{ command_topic }}.val'
              payload: '{{ trigger.to_state.state }}'
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "state" and trigger.entity_id == haspentity }}'
        sequence:
          - delay: '3' 
          - service: mqtt.publish
            data:
              topic: '{{ command_topic }}.val'
              payload: '{{ states("" ~ target_entity ~ "") }}'
